type Options = {
  references: Array<string>;
  definitions: Array<string>;
  match?: "any" | "all" | "one";
  isObject?: boolean;
  extendedJoiName?: string;
  extendedJoiSource?: string;
};

const JOI_WORD = ".";
const TEMPLATE_JOI_IMPORT_PLACEHOLDER = `import Joi from "joi";`;
const TEMPLATE_IMPORTS_PLACEHOLDER = "{IMPORTS}";
const TEMPLATE_BODY_PLACEHOLDER = "{BODY}";
const TEMPLATE_JOI_OBJECT = (definitions: Array<string>) =>
  `Joi.object({\n\u0020\u0020${definitions.join(",\n\u0020\u0020")}\n}).unknown()`;
const TEMPLATE_JOI_ALTERNATIVES = (definitions: Array<string>, match: string) =>
  `Joi.alternatives([\n\u0020\u0020${definitions.join(",\n\u0020\u0020")}\n]).match("${match}")`;

export const template = `// This file is autogenerated by "oas-to-joi"
${TEMPLATE_IMPORTS_PLACEHOLDER}

const schema = ${TEMPLATE_BODY_PLACEHOLDER};

export default schema;
`;

const getImportExtendedJoi = (options: Options): string | undefined => {
  if (!options.extendedJoiSource || !options.extendedJoiName) {
    return;
  }

  const hasDateField = options.definitions.some(
    (def) => def.indexOf(`${options.extendedJoiName}.date()`) > -1,
  );

  if (hasDateField) {
    return `import { ${options.extendedJoiName} } from "${options.extendedJoiSource}";`;
  }
};

const merge = (options: Options) => {
  const { references, definitions } = options;
  const needsImportJoi =
    definitions.toString().includes(JOI_WORD) || definitions.toString() === "";

  if (needsImportJoi) {
    const extendedJoiImport = getImportExtendedJoi(options);
    if (extendedJoiImport) {
      references.unshift(extendedJoiImport);
    }
    references.unshift(TEMPLATE_JOI_IMPORT_PLACEHOLDER);
  }

  const body = needsImportJoi
    ? options.match
      ? TEMPLATE_JOI_ALTERNATIVES(definitions, options.match)
      : options.isObject
        ? TEMPLATE_JOI_OBJECT(definitions)
        : definitions.join(",\n\u0020\u0020")
    : definitions.length > 1
      ? `{${definitions.join(",")}}`
      : definitions.join(",");

  return template
    .replace(TEMPLATE_IMPORTS_PLACEHOLDER, references.join("\n"))
    .replace(TEMPLATE_BODY_PLACEHOLDER, body);
};

export default merge;
