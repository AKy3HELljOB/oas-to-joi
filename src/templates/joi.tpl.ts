type Options = {
  references: Array<string>;
  definitions: Array<string>;
  match?: "any" | "all" | "one";
};

const JOI_WORD = ".";
const TEMPLATE_JOI_IMPORT_PLACEHOLDER = `import Joi from "joi";`;
const TEMPLATE_IMPORTS_PLACEHOLDER = "{IMPORTS}";
const TEMPLATE_BODY_PLACEHOLDER = "{BODY}";
const TEMPLATE_JOI_OBJECT = (definitions: Array<string>) =>
  `Joi.object({\n\u0020\u0020${definitions.join(",\n\u0020\u0020")}\n}).unknown()`;
const TEMPLATE_JOI_ALTERNATIVES = (definitions: Array<string>, match: string) =>
  `Joi.alternatives([\n\u0020\u0020${definitions.join(",\n\u0020\u0020")}\n]).match(${match}).unknown()`;

export const template = `// This file is autogenerated by "oas-to-joi"
${TEMPLATE_IMPORTS_PLACEHOLDER}

const schema = ${TEMPLATE_BODY_PLACEHOLDER};

export default schema;
`;
const merge = (options: Options) => {
  const { references, definitions } = options;
  const needsImportJoi =
    definitions.toString().includes(JOI_WORD) || definitions.toString() === "";

  if (needsImportJoi) {
    references.unshift(TEMPLATE_JOI_IMPORT_PLACEHOLDER);
  }

  const body = needsImportJoi
    ? ((options.match) ? TEMPLATE_JOI_ALTERNATIVES(definitions, options.match) : TEMPLATE_JOI_OBJECT(definitions))
    : (definitions.length > 1 ? `{${definitions.join(",")}}` : definitions.join(","));

  return template
    .replace(TEMPLATE_IMPORTS_PLACEHOLDER, references.join("\n"))
    .replace(TEMPLATE_BODY_PLACEHOLDER, body);
};

export default merge;
