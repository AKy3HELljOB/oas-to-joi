import { TSEnum } from "../enums/ts.enum";
import { Utils } from "../utils";

export class TypeScriptTpl {
  private warning = `// This file is autogenerated by "oas-to-joi"\n`;
  private header = "\nexport type *name* = {";
  private footer = "};\n";
  private nameRegEx = /\{\{\{(.*?)\}\}\}/;
  private propRegEx = /\{(.*?)\}/;
  private refTypeRegEx = /\*\*(.*?)\*\*/;

  private types = {
    primitives: {
      integer: TSEnum.INTEGER,
      string: TSEnum.STRING,
      boolean: TSEnum.BOOLEAN,
    },
    arrays: {
      array: (value) => `Array<${value}>`,
      arrayRef: (value) => `Array<${Utils.capitalizeWord(value)}>`,
    },
    enums: {
      enum: (value: Array<any>) => `"${value.join('" | "')}"`,
    },
  };

  render(item: string): Array<string | string> {
    const [typeNamePart, propertyPart] = item.split("_");

    let result = `${this.warning}`;
    result += `${this.renderImports(propertyPart.split(","))}`;
    result += this.renderHeader(typeNamePart);
    result += `${this.renderBody(propertyPart.split(","))}`;
    return [
      this.makeName(this.getName(typeNamePart)).join(""),
      `${Utils.clean(result)}\n${this.footer}`,
    ];
  }

  private makeName(value: string) {
    const name = Utils.toKebabCase(value);
    return [`${name}.type`, ".ts"];
  }
  private getName(value: string) {
    return Utils.matches(value, this.nameRegEx);
  }
  private renderHeader(value: string): string {
    return `${this.header.replace("*name*", this.getName(value))}\n`;
  }

  private renderBody(values: Array<string>): string {
    const props: Array<string> = [];
    for (const prop of values) {
      props.push(`\u0020\u0020${Utils.matches(prop, this.propRegEx)}`);
    }
    return props.join(",\n");
  }

  private renderImports(values: Array<string>): string {
    const imports: Array<string> = [];
    for (const refType of values) {
      const match = Utils.matches(refType, this.refTypeRegEx);
      if (match) {
        const [name] = this.makeName(match);
        imports.push(`import { ${match} } from "./${name}";\n`);
      }
    }
    return imports.join("\n");
  }

  mapArrayType() {
    return this.types.arrays;
  }
  mapPrimitiveType(value: string) {
    return this.types.primitives[value] || "Type Not Found";
  }
  mapEnumType() {
    return this.types.enums;
  }
}
